{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar NTCID = 'notice/NTCID';\nexport var getNtc = function getNtc(data) {\n  return {\n    type: NTCID,\n    data: data\n  };\n};\nvar idInitialState = {\n  data: 0\n};\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : idInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NTCID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.data\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/hyose/Documents/next_sample/modules/notice.ts"],"names":["NTCID","getNtc","data","type","idInitialState","reducer","state","action"],"mappings":";;;;;;AAAA,IAAMA,KAAK,GAAG,cAAd;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;AAAA,SAAgB;AAClCC,IAAAA,IAAI,EAAEH,KAD4B;AAElCE,IAAAA,IAAI,EAAJA;AAFkC,GAAhB;AAAA,CAAf;AAWP,IAAME,cAAc,GAAG;AACnBF,EAAAA,IAAI,EAAG;AADY,CAAvB;AAIA,eAAe,SAASG,OAAT,GAAqE;AAAA,MAApDC,KAAoD,uEAAnCF,cAAmC;AAAA,MAAnBG,MAAmB;;AAChF,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKH,KAAL;AACI,6CACOM,KADP;AAEIJ,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFjB;;AAIJ;AACI,aAAOI,KAAP;AAPR;AASH","sourcesContent":["const NTCID = 'notice/NTCID' as const\r\n\r\nexport const getNtc = (data: any) => ({\r\n    type: NTCID,\r\n    data\r\n});\r\n\r\ntype NtcAction = ReturnType<typeof getNtc>\r\n\r\ntype IdState = {\r\n    data: number\r\n}\r\n\r\nconst idInitialState = {\r\n    data : 0,\r\n}\r\n\r\nexport default function reducer(state: IdState = idInitialState, action: NtcAction) {\r\n    switch (action.type) {\r\n        case NTCID:\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}